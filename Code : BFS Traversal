Code : BFS Traversal
Send Feedback
Given an undirected and disconnected graph G(V, E), print its BFS traversal.
Note:
1. Here you need to consider that you need to print BFS path starting from vertex 0 only. 
2. V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
3. E is the number of edges present in graph G.
4. Take graph input in the adjacency matrix.
5. Handle for Disconnected Graphs as well
Input Format :
The first line of input contains two integers, that denote the value of V and E.
Each of the following E lines contains space separated two integers, that denote that there exists an edge between vertex a and b.
Output Format :
Print the BFS Traversal, as described in the task.
Constraints :
0 <= V <= 1000
0 <= E <= (V * (V - 1)) / 2
0 <= a <= V - 1
0 <= b <= V - 1
Time Limit: 1 second
Sample Input 1:
4 4
0 1
0 3
1 2
2 3
Sample Output 1:
0 1 3 2

# # Write your code here
# import queue
# class Graph:
#     def _init_(self,nVertices):
#         self.nVertices=nVertices
#         self.adjMatrix=[[0 for i in range(nVertices)] for j in range(nVertices)]
#     def addEdge(self,v1,v2):
#         self.adjMatrix[v1][v2]=1
#         self.adjMatrix[v2][v1]=1
#     def _dfsHelper(self,sv,visited):
#         print(sv)
#         visited[sv]=True
#         for i in range(self.nVertices):
#             if (self.adjMatrix[sv][i]>0 and visited[i] is False):
#     def dfs(self):
#         visited=[False for i in range(self.nVertices)]
#         self._dfsHelper(0,visited)
#     def bfs(self):
#         q=queueQueue()
#         q.put()
#         visited=[False for i in range(self.nVertices)]
#         visited[0]=True
#         while q.empty() is False:
#             u=q.get()
#             print(u)
#             for i in range(self.nVertices):
#                 if self.adjMatrix[u][i]>0 and visited[i] is False:
#                     q.put(i)
#                     visited[i]=True
#     def removeEdge(self,v1,v2):
#         if self.containsEdge(v1,v2) is False:
#             return
#         self.adjMatrix[v1][v2]=0
#         self.adjMatrix[v2][v1]=0
#     def containsEdge(self,v1,v2):
#         return True if self.adjMatrix[v1][v2]>0 else False
#     def _str_(self):
#         return str(self.adjMatrix)
    
## Read input as specified in the question.
## Print output as specified in the question.

import queue
class Graph:
    def __init__(self,tVertices):
        self.tVertices=tVertices
        self.adjMat=[[ 0 for i in range(self.tVertices)] for j in range(self.tVertices)]
        
    def addEdge(self,v1,v2):
        self.adjMat[v1][v2]=1
        self.adjMat[v2][v1]=1


    def bfsHelper(self,sv,visited):
        q=queue.Queue()
        q.put(sv)
        visited[sv]=True
        while q.empty() is False:
            v=q.get()
            print(v,end=' ')
            for i in range(self.tVertices):
                if self.adjMat[v][i]==1 and visited[i]==False:
                    q.put(i)
                    visited[i]=True
    def bfs(self):
        visited=[ False for i in range(self.tVertices)]
        for i in range(self.tVertices):
            if visited[i]==False:
                self.bfsHelper(i,visited)
       
                
        

sent=input().split()
tVertices=int(sent[0])
tEdges=int(sent[1])

g=Graph(tVertices) 
for i in range(tEdges):
    vertices=input().split()
    v1=int(vertices[0])
    v2=int(vertices[1])
    g.addEdge(v1,v2)
g.bfs()
    
